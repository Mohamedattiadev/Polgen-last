import express from 'express';
import { check, validationResult } from 'express-validator';
import Product from '../models/Product.js';
import { requireAuth, requireRole } from '../middlewares/authMiddleware/index.js'; // Ensure middleware paths match your structure

const router = express.Router();

// ==========================
// Create Product
// ==========================
router.post(
  '/',
  requireAuth, // Middleware to check if the user is authenticated
  [
    check('name').notEmpty().withMessage('Name is required'),
    check('price').isFloat({ gt: 0 }).withMessage('Price must be greater than 0'),
    check('stock').isInt({ min: 0 }).withMessage('Stock must be a positive integer'),
    check('category').notEmpty().withMessage('Category is required'),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { name, description, price, stock, category } = req.body;

    try {
      const product = await Product.create({
        name,
        description,
        price,
        stock,
        category,
        userId: req.user.id, // Ensure req.user is populated by requireAuth middleware
      });

      res.status(201).json({ message: 'Product created successfully', product });
    } catch (error) {
      console.error('Error creating product:', error.message);
      res.status(500).json({ error: 'Internal server error' });
    }
  }
);

// ==========================
// Get All Products
// ==========================
router.get('/', async (req, res) => {
  try {
    const products = await Product.findAll();
    res.status(200).json(products);
  } catch (error) {
    console.error('Error fetching products:', error.message);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// ==========================
// Get Product By ID
// ==========================
router.get('/:id', async (req, res) => {
  try {
    const product = await Product.findByPk(req.params.id);

    if (!product) {
      return res.status(404).json({ error: 'Product not found' });
    }

    res.status(200).json(product);
  } catch (error) {
    console.error('Error fetching product:', error.message);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// ==========================
// Update Product
// ==========================
router.put(
  '/:id',
  requireAuth,
  requireRole('admin'), // Ensure only admin can update products
  async (req, res) => {
    try {
      const product = await Product.findByPk(req.params.id);

      if (!product) {
        return res.status(404).json({ error: 'Product not found' });
      }

      const { name, description, price, stock, category } = req.body;

      await product.update({ name, description, price, stock, category });

      res.status(200).json({ message: 'Product updated successfully', product });
    } catch (error) {
      console.error('Error updating product:', error.message);
      res.status(500).json({ error: 'Internal server error' });
    }
  }
);

// ==========================
// Delete Product
// ==========================
router.delete(
  '/:id',
  requireAuth,
  requireRole('admin'), // Ensure only admin can delete products
  async (req, res) => {
    try {
      const product = await Product.findByPk(req.params.id);

      if (!product) {
        return res.status(404).json({ error: 'Product not found' });
      }

      await product.destroy();

      res.status(200).json({ message: 'Product deleted successfully' });
    } catch (error) {
      console.error('Error deleting product:', error.message);
      res.status(500).json({ error: 'Internal server error' });
    }
  }
);

export default router;

